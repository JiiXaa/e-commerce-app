const fs = require('fs');
const crypto = require('crypto');
const util = require('util');
const Repository = require('./repository');

// To avoid being constrain to a scrypt's call back, and use default function we use util.promisify to change call back version to a promise version instead (that's how we can use ASYNC/AWAIT)
const scrypt = util.promisify(crypto.scrypt);

class UsersRepository extends Repository {
  async create(attrs) {
    // attrs === { email: '', password: ''}
    attrs.id = this.randomId();

    // generating a salt
    const salt = crypto.randomBytes(8).toString('hex');
    // hashing password + salt
    const buffer = await scrypt(attrs.password, salt, 64);

    // every time want to make changes to the list of users, we need to load up contents of users.json
    const records = await this.getAll();
    const record = {
      ...attrs,
      // combine buffer generated by crypto.scrypt with salt
      password: `${buffer.toString('hex')}.${salt}`,
    };
    records.push(record);

    await this.writeAll(records);

    return record;
  }

  async comparePasswords(saved, supplied) {
    // saved = password save in our database. 'hashed.salt'
    // supplied = password given to us by a user trying sing in
    const [hashed, salt] = saved.split('.');
    const hashedSuppliedBuffer = await scrypt(supplied, salt, 64);

    return hashed === hashedSuppliedBuffer.toString('hex');
  }
}

module.exports = new UsersRepository('users.json');
